

// Factorialize a Number
// factor is faculteit van getal dus !n

// setup

function factorialize(num) {
  return num;
}

factorialize(5);

// ik zie geen operator die de faculteit uitrekent dus ik zou voor een for-functie gaan
// stel je hebt een array

var num = [1,2,3,4,5];
var total = 1;
for (var i = 0; i < num.length; i++) {
  total = total * num[i];
}
console.log(total); // 120 = 1*2*3*4*5


// alleen heb ik geen array tenzij ik die zou maken, maar een getal
// ik zou dus het getal moeten omzetten in een array

var factor = [];
var num = 5;

for (var i = 1; i < (num + 1); i++) {
  factor.push(i);
}
console.log(factor);

// en nu moet ik die twee zien te combineren
// door de variabelen te hernoemen
var factor = [];
var num = 5;

for (var i = 1; i < (num + 1); i++) {
  factor.push(i);
}
console.log(factor);

var factor = [1,2,3,4,5];
var num = 1;
for (var i = 0; i < factor.length; i++) {
  num = num * factor[i];
}
console.log(num); // 120 = 1*2*3*4*5
// krijgen goede uitkomst - factor var kan er tussenuit

var factor = [];
var num = 5;

for (var i = 1; i < (num + 1); i++) {
  factor.push(i);
}
console.log(factor);

var num = 1;
for (var i = 0; i < factor.length; i++) {
  num = num * factor[i];
}
console.log(num); // 120 = 1*2*3*4*5

// en nu het num probleem oplossen

nu met hulp
// 

if num===0 {
	return -1;
} else if num===1 {
	return 1; 
} else return num * factorialize(num-1);

function factorialize(num) {
  if (num === 0) { 
  	return 1; 
  }
  return num * factorialize(num-1);
}

factorialize(5); 


// iemand anders ook de iterative solution
function factorialize(num) {
    if(num <= 1) {
        return num
    } else {
        return num * factorialize(num-1) 
    }
}

factorialize(5)
This is the iterative solution:

function factorialize(num) {
    var cnt = 1;
    for (var i = 1; i <= num ; i++) {
        cnt *= i;
    }
    return cnt;
}

factorialize(5)


// recursion is dat een functie zichzelf herhaalt totdat ie dat niet meer doet



//n is a non-negative integer

function factorial (n is a non-negative integer)
    if n is 0 then
        return 1 [by the convention that 0! = 1]
    else   
//        return factorial(n â€“ 1) times n [recursively invoke factorial with the parameter 1 less than n]
		return factorial(n-1) * n;
    end if
end function


// https://www.youtube.com/watch?v=k7-N8R0-KY4  -- what is recursion


function factorialize(num) {
  var factorial = 1;
  for (var n = 2; n <= num; n++) {
    factorial = factorial * n;
  }

  return factorial;
}



// gevonden https://medium.freecodecamp.com/how-to-factorialize-a-number-in-javascript-9263c89a4b38#.cgok9f2ko


function factorialize(num) {
  if (num < 0) 
        return -1;
  else if (num == 0) 
      return 1;
  else {
      return (num * factorialize(num - 1));
  }
}
factorialize(5);

// met de while loop


function factorialize(num) {
  // Step 1. Create a variable result to store num
  var result = num;
   
  // If num = 0 OR num = 1, the factorial will return 1
  if (num === 0 || num === 1) 
    return 1; 
 
  // Step 2. Create the WHILE loop 
  while (num > 1) { 
    num--; // decrementation by 1 at each iteration
    result = result * num; // or result *= num; 
    /* 
                    num           num--      var result      result *= num         
    1st iteration:   5             4            5             20 = 5 * 4      
    2nd iteration:   4             3           20             60 = 20 * 3
    3rd iteration:   3             2           60            120 = 60 * 2
    4th iteration:   2             1          120            120 = 120 * 1
    5th iteration:   1             0          120
    End of the WHILE loop 
    */
  }
     
  // Step 3. Return the factorial of the provided integer
  return result; // 120
}
factorialize(5);



function factorialize(num) {
  var result = num;
  if (num === 0 || num === 1) 
    return 1; 
  while (num > 1) { 
    num--;
    result *= num;
  }
  return result;
}
factorialize(5);


// met de for loop


function factorialize(num) {
  // If num = 0 OR num = 1, the factorial will return 1
  if (num === 0 || num === 1)
    return 1;
  
  // We start the FOR loop with i = 4
  // We decrement i after each iteration 
  for (var i = num - 1; i >= 1; i--) {
    // We store the value of num at each iteration
    num = num * i; // or num *= i;
    /* 
                    num      var i = num - 1       num *= i         i--       i >= 1?
    1st iteration:   5           4 = 5 - 1         20 = 5 * 4        3          yes   
    2nd iteration:  20           3 = 4 - 1         60 = 20 * 3       2          yes
    3rd iteration:  60           2 = 3 - 1        120 = 60 * 2       1          yes  
    4th iteration: 120           1 = 2 - 1        120 = 120 * 1      0          no             
    5th iteration: 120               0                120
    End of the FOR loop 
    */
  }
  return num; //120
}
factorialize(5);



function factorialize(num) {
  if (num === 0 || num === 1)
    return 1;
  for (var i = num - 1; i >= 1; i--) {
    num *= i;
  }
  return num;
}
factorialize(5);
